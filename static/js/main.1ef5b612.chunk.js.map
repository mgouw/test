{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/OtherMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","OtherMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","title","keys","Object","map","key","index","lastMessageKey","isMyMessage","width","renderMessages","height","App","projectID","localStorage","getItem","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ef5b612.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons'\r\n\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const { chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();  {/* default is to refresh browser */}\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, { text });\r\n\r\n        setValue('');\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatId);\r\n    }\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n    }\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"message-input\"\r\n                placeholder=\"Send a message...\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\" />\r\n                </span>\r\n            </label>\r\n            <input \r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{ display: 'none' }}\r\n                onChange={handleUpload}\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\"/>\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default MessageForm;","const MyMessage = ({ message }) => {\r\n    if(message?.attachments?.length > 0) {\r\n        return (\r\n            <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: 'right' }}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"message\" style={{ float: 'right', marginRight: '10px', color: 'white', backgroundColor: '#9673DE' }}>\r\n            {message.text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyMessage;","const OtherMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    \r\n    return (\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div \r\n                    className=\"message-avatar\"\r\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                \r\n                />\r\n            )}\r\n            { message?.attachments?.length > 0 \r\n                ? (\r\n                    <img\r\n                        src={message.attachments[0].file}\r\n                        alt=\"message-attachment\"\r\n                        className=\"message-image\"\r\n                        style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n                    />\r\n                ) : (\r\n                    <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n                        {message.text}\r\n                    </div>\r\n                )\r\n                \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OtherMessage;","import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport OtherMessage from './OtherMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    const chat = chats && chats[activeChat];\r\n\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <OtherMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                        \r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n\r\n    if(!chat) return 'Loading...';\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat?.title}</div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{ height: '100px'}} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm {...props} chatId={activeChat} /> \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\r\n\r\n//import LoginForm from './components/LoginForm';\r\nimport ChatFeed from './components/ChatFeed';\r\n\r\nimport './Chat.css';\r\nimport React from 'react';\r\n\r\nconst App = () => {\r\n\r\n    //state = { isSignedIn: null };\r\n\r\n    // window.onload = (event) => {\r\n    //     window.gapi.load('client:auth2', () => {\r\n    //         window.gapi.client.init({\r\n    //             clientId:'491551402498-2u9qlqk0mgmvmr1cciac09tq3jlrgtrn.apps.googleusercontent.com',\r\n    //             scope:'profile'\r\n    //         }).then(() => {\r\n    //             this.auth = window.gapi.auth2.getAuthInstance();\r\n    //             console.log(window.gapi.auth2.getAuthInstance());\r\n    //             //return this.auth;\r\n    //             //this.setState({ isSignedIn: this.auth.isSignedIn.get() });\r\n    //         });\r\n    //         //let auth = window.gapi.auth2.init();\r\n    //     });\r\n    //     console.log('page is fully loaded');\r\n\r\n    //     if (localStorage.getItem('username') === '' ) {\r\n    //         console.log(\"TRUE\");\r\n    //     }\r\n        \r\n    //     function onSignIn(googleUser) {\r\n    //         var profile = googleUser.getBasicProfile();\r\n    //         console.log('User is ' + JSON.stringify(profile))\r\n    \r\n    //         var element = document.querySelector('#userInfo')\r\n    //         localStorage.setItem('username2', profile.getEmail());\r\n    //         localStorage.setItem('password2', '999');\r\n    //         element.innerHTML = '<div>Hi, ' + profile.getGivenName() + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button onclick=\"signOut()\">Sign Out</button></div>'\r\n    \r\n    //         /*var image = document.createElement('img')\r\n    //         image.setAttribute('src', profile.getImageUrl())\r\n    //         element.append(image)*/\r\n    //     }\r\n        \r\n    //     if (localStorage.getItem('username2') === '') {\r\n    //         onSignIn(window.gapi.auth2.getAuthInstance().currentUser.get());\r\n    //     } else {\r\n    //     }\r\n    // };\r\n\r\n    //ABOVE IS WORKING CODE \r\n\r\n        // window.gapi.load('client:auth2', () => {\r\n        //     window.gapi.client.init({\r\n        //         clientId:'491551402498-2u9qlqk0mgmvmr1cciac09tq3jlrgtrn.apps.googleusercontent.com',\r\n        //         scope:'profile'\r\n        //     }).then(() => {\r\n        //         this.auth = window.gapi.auth2.getAuthInstance();\r\n        //         console.log(window.gapi.auth2.getAuthInstance());\r\n        //         //return this.auth;\r\n        //         //this.setState({ isSignedIn: this.auth.isSignedIn.get() });\r\n        //     });\r\n        // });\r\n\r\n    //var auth = window.gapi.auth2.getAuthInstance();\r\n    //console.log(auth);\r\n    //console.log('auth2 ' + window.gapi.auth2);\r\n    // window.gapi.load('auth2', function() {\r\n    //     let auth = window.gapi.auth2.getAuthInstance();\r\n    //     console.log(\"auth:\" + auth);\r\n    // });\r\n\r\n    // if (window.gapi.auth2.getAuthInstance().isSignedIn.get()) {\r\n    //     var profile = window.gapi.auth2.getAuthInstance().currentUser.get().getBasicProfile();\r\n    //     localStorage.setItem('username2', profile.getEmail());\r\n    //     localStorage.setItem('password2', '999');\r\n    //     console.log('ID: ' + profile.getId());\r\n    //     console.log('Full Name: ' + profile.getName());\r\n    //     console.log('Given Name: ' + profile.getGivenName());\r\n    //     console.log('Family Name: ' + profile.getFamilyName());\r\n    //     console.log('Image URL: ' + profile.getImageUrl());\r\n    //     console.log('Email: ' + profile.getEmail());\r\n    // } else {\r\n    //     localStorage.removeItem('username2');\r\n    //     localStorage.removeItem('password2');\r\n    // }\r\n    \r\n\r\n    //ORIGINAL\r\n    //if(!localStorage.getItem('username')) return <LoginForm />;\r\n\r\n//PLACEHOLDER\r\n\r\n    //if user signed in\r\n        //if username exists\r\n            //log in\r\n        //else\r\n            //create user\r\n            //log in\r\n\r\n    return  (\r\n        <ChatEngine \r\n            height=\"100vh\"\r\n            projectID=\"c9518d9a-b207-40a5-9f1e-c17c3e7856ae\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed { ...chatAppProps } />}\r\n        />\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n//ReactDOM.render(e(chat_container), document.querySelector('chat_container'));"],"sourceRoot":""}